I"R<p>Hey, this is just a test post to demonstrate some of the functionalities.
This website is served using Vercel and the content is hosted on a GitHub repository.
It uses Jekyll to transform markdown files into static websites which is really useful!</p>

<ul>
  <li>You can render everything in HTML that you‚Äôre able to write in markdown, and a little more.</li>
  <li>Categories and tags are supported.
You can filter the archive by clicking on them.</li>
  <li>Check out the GitHub repo using <a href="https://github.com/rasmusbatman/website">this link</a>.</li>
</ul>

<p>Things like <em>italics</em>, <strong>bold text</strong>, <del>strikethroughs</del>, and a <strong><em><del>combination</del></em></strong> of them work just fine.
There‚Äôs even monospace formatting for code <code class="language-plaintext highlighter-rouge">like this</code>.</p>

<p>Through the power of plugins, Jekyll supports code snippets with proper syntax highlighting.
The plugin in question is called ‚Äúkramdown‚Äù and a list of supported languages is available <a href="https://github.com/rouge-ruby/rouge/wiki/List-of-supported-languages-and-lexers">here</a>.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">SIMPLSharpLibrary1</span>

<span class="p">{</span>
    <span class="k">public</span> <span class="k">struct</span> <span class="nc">tagBaseLibStruct</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">buf</span><span class="p">;</span>
        <span class="k">public</span> <span class="n">SimplSharpString</span> <span class="n">simplSharpStr</span><span class="p">;</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
        <span class="k">public</span> <span class="kt">int</span><span class="p">[]</span> <span class="n">arr</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">struct</span> <span class="nc">tagLibStruct</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="n">tagBaseLibStruct</span> <span class="n">baseLibStruct</span><span class="p">;</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">j</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">baseClass</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">baseClass</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">baseClassInt</span><span class="p">;</span>
        <span class="k">public</span> <span class="k">void</span> <span class="nf">baseClassFn</span><span class="p">()</span> <span class="p">{}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">Class1</span> <span class="p">:</span> <span class="n">baseClass</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="n">tagLibStruct</span> <span class="n">libStruct</span><span class="p">;</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">x</span><span class="p">;</span>
        <span class="k">public</span> <span class="n">SimplSharpString</span> <span class="n">str</span><span class="p">;</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="nf">classFn</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="m">0</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
:ET